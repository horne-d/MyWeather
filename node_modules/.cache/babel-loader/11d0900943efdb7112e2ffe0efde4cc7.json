{"ast":null,"code":"var _jsxFileName = \"/Users/danielhorne/Desktop/myweatherapp/src/App.js\";\nimport React from 'react';\nimport UserLocation from './components/UserLocation.js';\nimport Main from './components/Main.js';\nimport Email from './components/Email.js';\nimport './App.css';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userPosition: {\n        latitude: 35,\n        longitude: 139\n      },\n      weather: {},\n      regionInput: \"\",\n      showHide: true\n    };\n\n    this.changeRegion = value => {\n      this.setState({\n        regionInput: value\n      });\n    };\n\n    this.changeLocation = e => {\n      e.preventDefault();\n      Axios.get(`http://api.weatherstack.com/current?access_key=d1ac016511a944aa37d30232c10a1b4c&query=${this.state.regionInput}`).then(res => {\n        let userWeather = {\n          temperature: res.data.current.temperature,\n          description: res.data.current.weather_descriptions[0],\n          location: res.data.location.name,\n          region: res.data.location.region,\n          country: res.data.location.country,\n          wind_speed: res.data.current.wind_speed,\n          pressure: res.data.current.pressure,\n          precip: res.data.current.precip,\n          humidity: res.data.current.humidity,\n          img: res.data.current.weather_icons,\n          time: res.data.location.localtime\n        };\n        this.setState({\n          weather: userWeather\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    //check whether geolocation is supported\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        //get the lat and long of your device\n        let pos = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        };\n        this.setState({\n          userPosition: pos\n        }); //Weather Api call\n\n        Axios.get(`http://api.weatherstack.com/current?access_key=d1ac016511a944aa37d30232c10a1b4c&query=${this.state.userPosition.latitude},${this.state.userPosition.longitude}`).then(res => {\n          let userWeather = {\n            temperature: res.data.current.temperature,\n            description: res.data.current.weather_descriptions[0],\n            location: res.data.location.name,\n            region: res.data.location.region,\n            country: res.data.location.country,\n            wind_speed: res.data.current.wind_speed,\n            pressure: res.data.current.pressure,\n            precip: res.data.current.precip,\n            humidity: res.data.current.humidity,\n            img: res.data.current.weather_icons,\n            time: res.data.location.localtime\n          };\n          this.setState({\n            weather: userWeather\n          });\n        });\n      });\n    }\n  } //update the value of the the input field with state\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Main, {\n      changeRegion: this.changeRegion,\n      changeLocation: this.changeLocation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(UserLocation, {\n      weather: this.state.weather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"emailFooter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Email, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danielhorne/Desktop/myweatherapp/src/App.js"],"names":["React","UserLocation","Main","Email","Axios","App","Component","state","userPosition","latitude","longitude","weather","regionInput","showHide","changeRegion","value","setState","changeLocation","e","preventDefault","get","then","res","userWeather","temperature","data","current","description","weather_descriptions","location","name","region","country","wind_speed","pressure","precip","humidity","img","weather_icons","time","localtime","componentDidMount","navigator","geolocation","getCurrentPosition","position","pos","coords","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport UserLocation from './components/UserLocation.js';\nimport Main from './components/Main.js';\nimport Email from './components/Email.js';\nimport './App.css';\nimport Axios from 'axios';\n\nclass App extends React.Component {\n\n  //state\n  state = {\n    userPosition: {\n      latitude: 35,\n      longitude: 139\n    },\n    weather: {},\n    regionInput: \"\",\n    showHide:true\n  }\n\n  componentDidMount() {\n    //check whether geolocation is supported\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n\n        //get the lat and long of your device\n        let pos = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        }\n\n        this.setState({ userPosition: pos });\n\n        //Weather Api call\n        Axios.get(`http://api.weatherstack.com/current?access_key=d1ac016511a944aa37d30232c10a1b4c&query=${this.state.userPosition.latitude},${this.state.userPosition.longitude}`).then(res => {\n\n          let userWeather = {\n            temperature: res.data.current.temperature,\n            description: res.data.current.weather_descriptions[0],\n            location: res.data.location.name,\n            region: res.data.location.region,\n            country: res.data.location.country,\n            wind_speed: res.data.current.wind_speed,\n            pressure: res.data.current.pressure,\n            precip: res.data.current.precip,\n            humidity: res.data.current.humidity,\n            img: res.data.current.weather_icons,\n            time: res.data.location.localtime\n          }\n\n          this.setState({ weather: userWeather });\n        })\n      })\n    }\n  }\n\n  //update the value of the the input field with state\n  changeRegion = (value) => {\n    this.setState({ regionInput: value })\n  }\n\n  //update the weather depending upon the value user entered\n  changeLocation = (e) => {\n\n    e.preventDefault()\n\n    Axios.get(`http://api.weatherstack.com/current?access_key=d1ac016511a944aa37d30232c10a1b4c&query=${this.state.regionInput}`).then(res => {\n\n      let userWeather = {\n        temperature: res.data.current.temperature,\n        description: res.data.current.weather_descriptions[0],\n        location: res.data.location.name,\n        region: res.data.location.region,\n        country: res.data.location.country,\n        wind_speed: res.data.current.wind_speed,\n        pressure: res.data.current.pressure,\n        precip: res.data.current.precip,\n        humidity: res.data.current.humidity,\n        img: res.data.current.weather_icons,\n        time: res.data.location.localtime\n      }\n\n      this.setState({ weather: userWeather });\n\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"content\">\n          <Main changeRegion={this.changeRegion} changeLocation={this.changeLocation} />\n          <UserLocation weather={this.state.weather} />\n        </div>\n        <div className=\"emailFooter\">\n          <Email />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}